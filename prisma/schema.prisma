generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id           String     @id @default(uuid())
  clerkId      String     @unique
  firstName    String
  lastName     String
  username     String
  email        String
  profileImage String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  bookings     Booking[]
  favourites   Favorite[]
  properties   Property[]
  reviews      Review[]
}

model Property {
  id          String     @id @default(uuid())
  name        String
  tagline     String
  category    String
  country     String     @default("Україна")
  description String
  price       Int
  guests      Int
  bedrooms    Int
  beds        Int
  baths       Int
  amenities   Json
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  profileId   String
  address     String
  image       String[]
  location    String
  pets        String
  bookings    Booking[]
  favourites  Favorite[]
  profile     Profile    @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  reviews     Review[]
}

model Favorite {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  profileId  String
  propertyId String
  profile    Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Review {
  id         String   @id @default(uuid())
  profileId  String
  propertyId String
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  profile    Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Booking {
  id            String   @id @default(uuid())
  profileId     String
  propertyId    String
  orderTotal    Int
  totalNights   Int
  checkIn       DateTime
  checkOut      DateTime
  paymentStatus Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  profile       Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}
